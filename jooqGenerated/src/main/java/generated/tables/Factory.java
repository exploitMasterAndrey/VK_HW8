/*
 * This file is generated by jOOQ.
 */
package generated.tables;


import generated.Keys;
import generated.Public;
import generated.tables.records.FactoryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Factory extends TableImpl<FactoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.factory</code>
     */
    public static final Factory FACTORY = new Factory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FactoryRecord> getRecordType() {
        return FactoryRecord.class;
    }

    /**
     * The column <code>public.factory.name</code>.
     */
    public final TableField<FactoryRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.factory.address</code>.
     */
    public final TableField<FactoryRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private Factory(Name alias, Table<FactoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Factory(Name alias, Table<FactoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.factory</code> table reference
     */
    public Factory(String alias) {
        this(DSL.name(alias), FACTORY);
    }

    /**
     * Create an aliased <code>public.factory</code> table reference
     */
    public Factory(Name alias) {
        this(alias, FACTORY);
    }

    /**
     * Create a <code>public.factory</code> table reference
     */
    public Factory() {
        this(DSL.name("factory"), null);
    }

    public <O extends Record> Factory(Table<O> child, ForeignKey<O, FactoryRecord> key) {
        super(child, key, FACTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<FactoryRecord> getPrimaryKey() {
        return Keys.FACTORY_PKEY;
    }

    @Override
    public Factory as(String alias) {
        return new Factory(DSL.name(alias), this);
    }

    @Override
    public Factory as(Name alias) {
        return new Factory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Factory rename(String name) {
        return new Factory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Factory rename(Name name) {
        return new Factory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
